Задача A: Великое Лайнландское переселение

#include <bits/stdc++.h>

using namespace std;

int main() {
    int n, a;
    vector<int> v, x;
    stack<int> s1, s2;
    cin >> n;
    s1.push(-1);
    s2.push(-1);
    for (int i = 0; i < n; i++) {
        cin >> a;
        v.push_back(a);
    }
    v.push_back(-1);
    for (int i = n - 1; i >= 0; i--) {
        while (v[i] <= s1.top()) {
            s1.pop();
            s2.pop();
        }
        x.push_back(s2.top());
        s1.push(v[i]);
        s2.push(i);
    }
    for (int i = n - 1; i >= 0; i--) {
        cout << x[i] << " ";
    }
    return 0;
}



Задача B: Гистограмма

#include <bits/stdc++.h>

using namespace std;

int main() {
    long long n, a, x;
    cin >> n;
    vector<long long> v, c1(n, 0), c2(n, 0);
    stack<long long> s1, s2, s11, s22;
    v.push_back(-1);
    for (int i = 0; i < n; i++) {
        cin >> a;
        v.push_back(a);
    }
    v.push_back(-1);
    s1.push(-1);
    s2.push(n + 1);
    for (int i = n; i >= 1; i--) {
        while (v[i] <= s1.top()) {
            s1.pop();
            s2.pop();
        }
        c1[n - i] = s2.top();
        s1.push(v[i]);
        s2.push(i);
    }
    s11.push(-1);
    s22.push(0);
    for (int i = 1; i <= n; i++) {
        while (v[i] <= s11.top()) {
            s11.pop();
            s22.pop();
        }
        c2[i - 1] = s22.top();
        s11.push(v[i]);
        s22.push(i);
    }
    x = 0;
    reverse(c1.begin(), c1.end());
    for (int i = 0; i < n; i++) {
        x = max(x, v[i + 1] * (c1[i] - c2[i] - 1));
    }


    cout << x;
    return 0;
}



Задача C: Большой, белый, очень прямоугольный

#include <bits/stdc++.h>

using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int x;
    int m, n, a;
    cin >> m >> n;
    vector<int> v(n + 2, 0);
    vector<int> c2(n, 0);
    stack<int> s2, s22;

    v[0] = -1;
    v[n + 1] = -1;
    x = 0;

    for (int j = 1; j <= m; j++) {
        s22.push(0);
        for (int i = 1; i <= n; i++) {
            cin >> a;
            if (a == 0) {
                v[i]++;
            } else {
                v[i] = 0;
            }
            while (v[i] <= v[s22.top()]) {
                s22.pop();
            }
            c2[i - 1] = s22.top();
            s22.push(i);
        }

        s2.push(n + 1);
        for (int i = n; i >= 1; i--) {
            while (v[i] <= v[s2.top()]) {
                s2.pop();
            }
            if (v[i] > 0 && x < v[i] * (s2.top() - c2[i - 1] - 1)) {
                x = v[i] * (s2.top() - c2[i - 1] - 1);
            }
            s2.push(i);
        }
    }

    cout << x;

    return 0;
}



Задача D: Минимум на отрезке

#include <bits/stdc++.h>

using namespace std;

int main() {
    int n, k, a;
    cin >> n >> k;
    vector<int> v(n, 0);
    deque<int> d;

    for (int i = 0; i < n; i++) {
        cin >> a;
        v[i] = a;
    }

    a = k - 1;
    d.push_front(a);
    for (int i = k - 2; i >= 0; i--) {
        if (v[i] < v[a]) {
            a = i;
            d.push_front(a);
        }
    }

    cout << v[d.front()] << ' ';

    for (int i = k; i < n; i++) {
        // cout << '?' << ' ';
        if (d.front() == i - k) {
            // cout << "-f" << v[d.front()] << ' ';
            d.pop_front();
        }

        while (!d.empty() && (v[i] <= v[d.back()])) {
            // cout << "-b" << v[d.back()] << ' ';
            d.pop_back();
        }
        d.push_back(i);
        cout << v[d.front()] << " ";
    }

    return 0;
}



Задача F: Маршрут для трекинга

#include <bits/stdc++.h>

using namespace std;

int main() {
    int n, k, a, b, x;
    cin >> n >> k;
    vector<int> v(n - 1, 0);
    cin >> a;
    for (int i = 0; i < n - 1; i++) {
        cin >> b;
        if (a >= b) {
            v[i] = 0;
        } else {
            v[i] = 1;
        }
        a = b;
    }
    a = 0;
    for (int i = 0; i < k - 1; i++) {
        a += v[i];
    }
    x = a;
    for (int i = k - 1; i < n - 1; i++) {
        a -= v[i - (k - 1)];
        a += v[i];
        x = min(x, a);
    }
    cout << x;

    return 0;
}



