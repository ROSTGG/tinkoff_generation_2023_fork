Задача A: От списка ребер к матрице смежности, ориентированный вариант

#include <iostream>
#include <vector>

int main() {
    int n, m, a, b;
    std::cin >> n >> m;
    std::vector<std::vector<int>> v(n, std::vector<int>(n));
    for (int i = 0; i < m; i++) {
        std::cin >> a >> b;
        v[a - 1][b - 1] = 1;
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            std::cout << v[i][j] << " ";
        }
        std::cout << '\n';
    }
}



Задача B: Степени вершин по списку ребер

#include <iostream>
#include <vector>

int main() {
    int n, m, a, b;
    std::cin >> n >> m;
    std::vector<int> v(n);
    for (int i = 0; i < m; i++) {
        std::cin >> a >> b;
        v[a - 1] += 1;
        v[b - 1] += 1;
    }
    for (int i = 0; i < n; i++) {
        std::cout << v[i] << " ";
    }
}



Задача C: Обход графа

#include <iostream>
#include <vector>

void DFS(int x, std::vector<int>& u, std::vector<std::vector<int>>& v1) {
    u[x] = 1;
    for (int i = 0; i < v1[x].size(); i++) {
        if (u[v1[x][i]] == 0) {
            DFS(v1[x][i], u, v1);
        }
    }
}


int main() {
    int n, m, a, b, su;
    std::cin >> n >> m;
    std::vector<std::vector<int>> v(n, std::vector<int>(n));
    std::vector<std::vector<int>> v1(n);
    std::vector<int> u(n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            std::cin >> a;
            v[i][j] = a;
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (v[i][j] != 0) {
                v1[i].push_back(j);
            }
        }
    }
    DFS(m - 1, u, v1);

    for (int i = 0; i < n; i++) {
        if (u[i] != 0) {
            su += 1;
        }
    }

    std::cout << su;
}



Задача D: Дерево?

#include <iostream>
#include <vector>

void DFS(int x, std::vector<int>& u, std::vector<std::vector<int>>& v1, int rod, int& a) {
    u[x] = 1;
    for (int i = 0; i < v1[x].size(); i++) {
        if (u[v1[x][i]] == 0) {
            DFS(v1[x][i], u, v1, x, a);
        } else {
            if (v1[x][i] != rod) {
                a = 1;
            }
        }
    }
}


int main() {
    int n, m, a, b;
    std::cin >> n >> m;
    std::vector<std::vector<int>> v(n, std::vector<int>(2));
    std::vector<std::vector<int>> v1(n);
    std::vector<int> u(n);
    for (int i = 0; i < m; i++) {
        std::cin >> a >> b;
        v[i][0] = a - 1;
        v[i][1] = b - 1;
    }
    for (int i = 0; i < m; i++) {
        v1[v[i][0]].push_back(v[i][1]);
        v1[v[i][1]].push_back(v[i][0]);
    }
    a = 0;
    DFS(0, u, v1, n, a);
    for (int i = 0; i < n; i++) {
        if (u[i] == 0) {
            a = 1;
            break;
        }
    }
    if (a == 0) {
        std::cout << "YES";
    } else {
        std::cout << "NO";
    }
}



Задача E: Компоненты связности

#include <iostream>
#include <vector>
#include <algorithm>

void DFS(int x, std::vector<int>& u, std::vector<std::vector<int>>& v1, int b, std::vector<std::vector<int>>& v2) {
    u[x] = 1;
    v2[b].push_back(x);
    for (int i = 0; i < v1[x].size(); i++) {
        if (u[v1[x][i]] == 0) {
            DFS(v1[x][i], u, v1, b, v2);
        }
    }
}


int main() {
    int n, m, a, b;
    std::cin >> n >> m;
    std::vector<std::vector<int>> v(m, std::vector<int>(2)), v1(n), v2;
    std::vector<int> u(n), vv;
    for (int i = 0; i < m; i++) {
        std::cin >> a >> b;
        v[i][0] = a - 1;
        v[i][1] = b - 1;
    }
    for (int i = 0; i < m; i++) {
        v1[v[i][0]].push_back(v[i][1]);
        v1[v[i][1]].push_back(v[i][0]);
    }
    b = 0;
    for (int i = 0; i < n; i++) {
        if (u[i] == 0) {
            v2.push_back(vv);
            DFS(i, u, v1, b, v2);
            b += 1;
        }
    }
    std::cout << b << '\n';
    for (int i = 0; i < b; i++) {
        std::cout << v2[i].size() << '\n';
        sort(v2[i].begin(), v2[i].end());
        for (int j = 0; j < v2[i].size(); j++) {
            std::cout << v2[i][j] + 1 << " ";
        }
        std::cout << '\n';
    }
}



Задача F: Долой списывание!

#include <iostream>
#include <vector>
#include <algorithm>

void DFS(int x, std::vector<int>& u, std::vector<std::vector<int>>& v1, int& b, int& c, int nom) {
    u[x] = nom;
    for (int i = 0; i < v1[x].size(); i++) {
        if (u[v1[x][i]] == 0) {
            if (nom == 1) {
                DFS(v1[x][i], u, v1, b, c, 2);
            } else {
                DFS(v1[x][i], u, v1, b, c, 1);
            }
        } else {
            if (u[v1[x][i]] == nom) {
                c = 1;
                break;
            }
        }
    }
}


int main() {
    int n, m, a, b, c, nom;
    std::cin >> n >> m;
    std::vector<std::vector<int>> v(m, std::vector<int>(2)), v1(n);
    std::vector<int> u(n), vv;
    for (int i = 0; i < m; i++) {
        std::cin >> a >> b;
        v[i][0] = a - 1;
        v[i][1] = b - 1;
    }
    for (int i = 0; i < m; i++) {
        v1[v[i][0]].push_back(v[i][1]);
        v1[v[i][1]].push_back(v[i][0]);
    }
    b = 0;
    for (int i = 0; i < n; i++) {
        if (c == 1) {
            break;
        }
        if (u[i] == 0) {
            DFS(i, u, v1, b, c, 1);
            b += 1;
        }
    }
    if (c == 0) {
        std::cout << "YES";
    } else {
        std::cout << "NO";
    }
}



Задача G: Есть ли цикл?

#include <iostream>
#include <vector>
#include <algorithm>

void DFS(int x, std::vector<int>& u, std::vector<std::vector<int>>& v1, int& b, int& c) {
    u[x] = 1;
    for (int i = 0; i < v1[x].size(); i++) {
        if (u[v1[x][i]] == 0) {
            DFS(v1[x][i], u, v1, b, c);
        } else {
            if (u[v1[x][i]] == 1) {
                c = 1;
                break;
            }
        }
    }
    u[x] = 2;
}


int main() {
    int n, m, a, b, c;
    std::cin >> n >> m;
    std::vector<std::vector<int>> v(m, std::vector<int>(2)), v1(n);
    std::vector<int> u(n), vv;
    for (int i = 0; i < m; i++) {
        std::cin >> a >> b;
        v[i][0] = a - 1;
        v[i][1] = b - 1;
    }
    for (int i = 0; i < m; i++) {
        v1[v[i][0]].push_back(v[i][1]);
    }
    b = 0;
    for (int i = 0; i < n; i++) {
        if (c == 1) {
            break;
        }
        if (u[i] == 0) {
            DFS(i, u, v1, b, c);
            b += 1;
        }
    }
    if (c == 0) {
        std::cout << 0;
    } else {
        std::cout << 1;
    }
}



Задача H: Тесей и минотавр

#include <iostream>
#include <vector>
#include <algorithm>

void DFS(int x, std::vector<int>& u, std::vector<std::vector<int>>& v1, int& b, int& c, int nom) {
    u[x] = nom;
    for (int i = 0; i < v1[x].size(); i++) {
        if (u[v1[x][i]] == 0) {
            DFS(v1[x][i], u, v1, b, c, nom + 1);
        } else {
            if (u[v1[x][i]] == nom) {
                c = 1;
                break;
            }
        }
    }
}


int main() {
    int n, m, a, b, c, nom;
    std::cin >> n >> m;
    std::vector<std::vector<int>> v(n - 1, std::vector<int>(2)), v1(n);
    std::vector<int> u(n), vv;
    for (int i = 0; i < n - 1; i++) {
        std::cin >> a >> b;
        v[i][0] = a - 1;
        v[i][1] = b - 1;
    }
    for (int i = 0; i < n - 1; i++) {
        v1[v[i][0]].push_back(v[i][1]);
        v1[v[i][1]].push_back(v[i][0]);
    }
    b = 0;
    DFS(m - 1, u, v1, b, c, 0);
    b = 0;
    for (int i = 0; i < n; i++) {
        if (u[i] > b) {
            b = u[i];
        }
    }
    for (int i = 0; i < n; i++) {
        if (u[i] == b) {
            std::cout << i + 1 << " ";
        }
    }
}




